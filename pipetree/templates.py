# MIT License

# Copyright (c) 2016 Morgan McDermott & John Carlyle

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
import json
from collections import OrderedDict

_default_config = {
    'project_name': '%s'
}
DEFAULT_CONFIG = json.dumps(_default_config, indent=4)
DEFAULT_HANDLERS = """# Generated by pipetree
import pipetree

def handler(CatPictures, SearchParams):
    print("Search parameters: ", list(map(lambda x: x._fanout_parameters(SearchParams[0].payload))))
    for picture_artifact in CatPictures:
       picture_artifact.payload.open()
       yield pipetree.Item(
         payload=len(picture_artifact.payload.read())
       )
       picture_artifact.payload.close()
"""

_default_pipeline_config = OrderedDict([
    ('CatPictures', {
        'type': 'LocalDirectoryPipelineStage',
        'filepath': 'cat_imgs',
        'binary_mode': True
    }),
    ('SearchParams', {
        'type': 'GridSearchPipelineStage',
        'whiten_images': [True, False],
        'number_neurons': [100, 500]
    }),
    ('ProcessImages', {
        'inputs': ['CatPictures', 'SearchParams'],
        'type': 'ExecutorPipelineStage',
        'execute': '%s.main.handler'
    })
])
DEFAULT_PIPELINE_CONFIG = json.dumps(_default_pipeline_config, indent=4)

_default_cluster_config = {
    "cluster_name": "%s",
    "servers": [{"type": "t2.micro", "storage": "20"}]
}
DEFAULT_CLUSTER_CONFIG = json.dumps(_default_cluster_config, indent=4)
